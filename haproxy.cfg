global
    daemon
    #maxconn 256
    debug

defaults
    timeout connect 5000ms
    timeout client 500000ms
    timeout server 500000ms
    option forwardfor
    log global

frontend name_resolver_http
    bind *:80
    mode http
{{ range $dir := lsdir "/services" }}
    {{ $schemedir := printf "/services/%s/scheme" $dir}}{{ if ls $schemedir }}{{$scheme := getv $schemedir}}
        {{ if and $scheme (eq $scheme "http") }}
    acl is_{{ $dir }} url_beg /{{ $dir }}
    acl is_{{ $dir }} hdr_beg(host) {{ $dir }}
    use_backend {{ $dir }}_servers if is_{{ $dir }}
        {{ end }}
        {{ if and $scheme (eq $scheme "https") }}
    acl is_{{ $dir }} url_beg /{{ $dir }}
    acl is_{{ $dir }} hdr_beg(host) {{ $dir }}
    redirect scheme https code 301 if !{ ssl_fc } is_{{ $dir }}
        {{ end }}
	{{ if and $scheme (eq $scheme "sni") }}
    redirect scheme https code 301 if { hdr_end(host) -i {{ $dir }} } !{ ssl_fc }
	{{ end }}
{{ end }}{{ end }}

frontend name_resolver_tcp
    bind *:81
    mode tcp
{{ range $dir := lsdir "/services" }}
    {{ $schemedir := printf "/services/%s/scheme" $dir}}{{ if ls $schemedir }}{{$scheme := getv $schemedir}}
        {{if and $scheme (eq $scheme "tcp")}}
    acl is_{{ $dir }} url_beg /{{ $dir }}
    use_backend {{ $dir }}_servers if is_{{ $dir }}
        {{ end }}{{ end }}
{{ end }}

{{ if ls "/config/services/ssl_support" }}
frontend name_resolver_https
    bind *:443 ssl crt /keys
    mode http
    {{ range $dir := lsdir "/services" }}
        {{ $schemedir := printf "/services/%s/scheme" $dir}}{{ if ls $schemedir }}{{$scheme := getv $schemedir}}
        {{ if eq $scheme "https" }}
    acl is_{{ $dir }} hdr_beg(host) {{ $dir }}
    use_backend {{ $dir }}_servers if is_{{ $dir }}
        {{ end }}{{ end }}
    {{ end }}
{{ end }}

frontend https-in *:443  
    mode tcp
    bind *:8443
       ## From http://byte-consult.be/2014/01/28/using-haproxy-as-an-ssl-gateway/
        ## Better described here: http://blog.haproxy.com/2012/04/13/enhanced-ssl-load-balancing-with-server-name-indication-sni-tls-extension/

    option socket-stats
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }

    {{ range $dir := lsdir "/services" }}
        {{ $schemedir := printf "/services/%s/scheme" $dir}}{{ if ls $schemedir }}{{$scheme := getv $schemedir}}
        {{ if eq $scheme "sni" }}
    use_backend {{ $dir }}_servers if { req_ssl_sni -i {{ $dir }} }
        {{ end }}{{ end }}
    {{ end }}



{{ range $dir := lsdir "/services" }}
    {{ $host_portdir := printf "/services/%s/host_port" $dir}}{{range $host_port := ls $host_portdir}}
    {{ $schemedir := printf "/services/%s/scheme" $dir}}{{ if ls $schemedir }}{{$scheme := getv $schemedir}}
    {{ if $scheme }}
frontend {{ $dir }}_port
    {{if eq $scheme "https"}}
        mode http
    {{ else }}
        mode {{ $scheme }}
    {{ end }}
    bind *:{{ getv $host_portdir }}
    default_backend {{ $dir }}_servers
    {{ end }}{{ end }}{{ end }}
{{ end }}


{{ range $dir := lsdir "/services" }}
backend {{ $dir }}_servers
    {{ $schemedir := printf "/services/%s/scheme" $dir}}{{ if ls $schemedir }}{{$scheme := getv $schemedir}}
    {{if eq $scheme "https"}}
        mode http
    {{ else if eq $scheme "sni" }}
	## Setup our sni awesomeness. See https://scriptthe.net/2015/02/08/pass-through-ssl-with-haproxy/
	mode tcp
  	# maximum SSL session ID length is 32 bytes.
	stick-table type binary len 32 size 30k expire 30m

  	acl clienthello req_ssl_hello_type 1
  	acl serverhello rep_ssl_hello_type 2

  	# use tcp content accepts to detects ssl client and server hello.
  	tcp-request inspect-delay 5s
  	tcp-request content accept if clienthello

  	# no timeout on response inspect delay by default.
  	tcp-response content accept if serverhello

  	stick on payload_lv(43,1) if clienthello

  	# Learn on response if server hello.
  	stick store-response payload_lv(43,1) if serverhello

  	option ssl-hello-chk

    {{ else }}
        mode {{ $scheme }}
    {{ end }}
    {{ $hostsdir := printf "/services/%s/hosts" $dir}}{{ range $hostnumber := ls $hostsdir }}
        {{ with $host := printf "/services/%s/hosts/%s" $dir $hostnumber }}
               {{ with $host_ip := getv $host }}
                        {{ if $host_ip }}
    server server_{{ $dir }}_{{ $hostnumber }} {{ getv $host }}
                        {{ end }}
                {{ end }}
        {{ end }}
    {{ end }}{{ end }}
{{ end }}
